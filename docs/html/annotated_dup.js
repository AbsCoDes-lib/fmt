var annotated_dup =
[
    [ "abscodes", null, [
      [ "fmt", null, [
        [ "dummy", "classabscodes_1_1fmt_1_1dummy.html", "classabscodes_1_1fmt_1_1dummy" ]
      ] ]
    ] ],
    [ "internal", null, [
      [ "add_thousands_sep", "classinternal_1_1add__thousands__sep.html", "classinternal_1_1add__thousands__sep" ],
      [ "ansi_color_escape", "structinternal_1_1ansi__color__escape.html", "structinternal_1_1ansi__color__escape" ],
      [ "arg_converter", "classinternal_1_1arg__converter.html", "classinternal_1_1arg__converter" ],
      [ "arg_formatter_base", "classinternal_1_1arg__formatter__base.html", "classinternal_1_1arg__formatter__base" ],
      [ "arg_map", "classinternal_1_1arg__map.html", "classinternal_1_1arg__map" ],
      [ "arg_ref", "structinternal_1_1arg__ref.html", "structinternal_1_1arg__ref" ],
      [ "auto_id", "structinternal_1_1auto__id.html", null ],
      [ "basic_buffer", "classinternal_1_1basic__buffer.html", "classinternal_1_1basic__buffer" ],
      [ "basic_data", "structinternal_1_1basic__data.html", "structinternal_1_1basic__data" ],
      [ "char_converter", "classinternal_1_1char__converter.html", "classinternal_1_1char__converter" ],
      [ "char_counter", "structinternal_1_1char__counter.html", "structinternal_1_1char__counter" ],
      [ "char_specs_checker", "classinternal_1_1char__specs__checker.html", "classinternal_1_1char__specs__checker" ],
      [ "char_t", "structinternal_1_1char__t.html", "structinternal_1_1char__t" ],
      [ "char_traits", "structinternal_1_1char__traits.html", null ],
      [ "char_traits< char >", "structinternal_1_1char__traits_3_01char_01_4.html", "structinternal_1_1char__traits_3_01char_01_4" ],
      [ "char_traits< wchar_t >", "structinternal_1_1char__traits_3_01wchar__t_01_4.html", "structinternal_1_1char__traits_3_01wchar__t_01_4" ],
      [ "checked", "structinternal_1_1checked.html", "structinternal_1_1checked" ],
      [ "checked_args", "structinternal_1_1checked__args.html", "structinternal_1_1checked__args" ],
      [ "chrono_format_checker", "structinternal_1_1chrono__format__checker.html", "structinternal_1_1chrono__format__checker" ],
      [ "chrono_formatter", "structinternal_1_1chrono__formatter.html", "structinternal_1_1chrono__formatter" ],
      [ "conditional_helper", "structinternal_1_1conditional__helper.html", null ],
      [ "container_buffer", "classinternal_1_1container__buffer.html", "classinternal_1_1container__buffer" ],
      [ "context_base", "classinternal_1_1context__base.html", "classinternal_1_1context__base" ],
      [ "counting_iterator", "classinternal_1_1counting__iterator.html", "classinternal_1_1counting__iterator" ],
      [ "cstring_type_checker", "classinternal_1_1cstring__type__checker.html", "classinternal_1_1cstring__type__checker" ],
      [ "custom_formatter", "classinternal_1_1custom__formatter.html", "classinternal_1_1custom__formatter" ],
      [ "custom_value", "structinternal_1_1custom__value.html", "structinternal_1_1custom__value" ],
      [ "decimal_formatter", "classinternal_1_1decimal__formatter.html", "classinternal_1_1decimal__formatter" ],
      [ "decimal_formatter_null", "classinternal_1_1decimal__formatter__null.html", "classinternal_1_1decimal__formatter__null" ],
      [ "dummy_int", "structinternal_1_1dummy__int.html", "structinternal_1_1dummy__int" ],
      [ "dummy_string_view", "structinternal_1_1dummy__string__view.html", "structinternal_1_1dummy__string__view" ],
      [ "dynamic_format_specs", "structinternal_1_1dynamic__format__specs.html", "structinternal_1_1dynamic__format__specs" ],
      [ "dynamic_specs_handler", "classinternal_1_1dynamic__specs__handler.html", "classinternal_1_1dynamic__specs__handler" ],
      [ "error_handler", "structinternal_1_1error__handler.html", "structinternal_1_1error__handler" ],
      [ "fill", "structinternal_1_1fill.html", "structinternal_1_1fill" ],
      [ "float_type_checker", "classinternal_1_1float__type__checker.html", "classinternal_1_1float__type__checker" ],
      [ "format_string_checker", "classinternal_1_1format__string__checker.html", "classinternal_1_1format__string__checker" ],
      [ "format_type", "structinternal_1_1format__type.html", null ],
      [ "formatbuf", "classinternal_1_1formatbuf.html", "classinternal_1_1formatbuf" ],
      [ "fp", "classinternal_1_1fp.html", "classinternal_1_1fp" ],
      [ "function", "structinternal_1_1function.html", [
        [ "result", "structinternal_1_1function_1_1result.html", "structinternal_1_1function_1_1result" ]
      ] ],
      [ "gen_digits_params", "structinternal_1_1gen__digits__params.html", "structinternal_1_1gen__digits__params" ],
      [ "get_type", "structinternal_1_1get__type.html", "structinternal_1_1get__type" ],
      [ "id_adapter", "structinternal_1_1id__adapter.html", "structinternal_1_1id__adapter" ],
      [ "init", "structinternal_1_1init.html", "structinternal_1_1init" ],
      [ "int_checker", "structinternal_1_1int__checker.html", "structinternal_1_1int__checker" ],
      [ "int_checker< true >", "structinternal_1_1int__checker_3_01true_01_4.html", "structinternal_1_1int__checker_3_01true_01_4" ],
      [ "int_traits", "structinternal_1_1int__traits.html", null ],
      [ "int_type_checker", "classinternal_1_1int__type__checker.html", "classinternal_1_1int__type__checker" ],
      [ "integer_sequence", "structinternal_1_1integer__sequence.html", "structinternal_1_1integer__sequence" ],
      [ "is_integer", "structinternal_1_1is__integer.html", "structinternal_1_1is__integer" ],
      [ "is_like_std_string", "classinternal_1_1is__like__std__string.html", "classinternal_1_1is__like__std__string" ],
      [ "is_like_std_string< fmt::basic_string_view< Char > >", "structinternal_1_1is__like__std__string_3_01fmt_1_1basic__string__view_3_01_char_01_4_01_4.html", null ],
      [ "is_output_iterator", "classinternal_1_1is__output__iterator.html", "classinternal_1_1is__output__iterator" ],
      [ "is_range_", "structinternal_1_1is__range__.html", null ],
      [ "is_range_< T, typename std::conditional< false, conditional_helper< decltype(internal::declval< T >().begin()), decltype(internal::declval< T >().end())>, void >::type >", "structinternal_1_1is__range___3_01_t_00_01typename_01std_1_1conditional_3_01false_00_01condition3cb3b849b8281fb701deab896849f46a.html", null ],
      [ "is_streamable", "classinternal_1_1is__streamable.html", "classinternal_1_1is__streamable" ],
      [ "is_string", "structinternal_1_1is__string.html", null ],
      [ "is_string< const std::FILE * >", "structinternal_1_1is__string_3_01const_01std_1_1_f_i_l_e_01_5_01_4.html", null ],
      [ "is_string< std::FILE * >", "structinternal_1_1is__string_3_01std_1_1_f_i_l_e_01_5_01_4.html", null ],
      [ "is_tuple_like_", "classinternal_1_1is__tuple__like__.html", "classinternal_1_1is__tuple__like__" ],
      [ "is_zero_int", "classinternal_1_1is__zero__int.html", "classinternal_1_1is__zero__int" ],
      [ "it_category", "structinternal_1_1it__category.html", null ],
      [ "it_category< T * >", "structinternal_1_1it__category_3_01_t_01_5_01_4.html", "structinternal_1_1it__category_3_01_t_01_5_01_4" ],
      [ "it_category< T, typename void_< typename T::iterator_category >::type >", "structinternal_1_1it__category_3_01_t_00_01typename_01void___3_01typename_01_t_1_1iterator__category_01_4_1_1type_01_4.html", "structinternal_1_1it__category_3_01_t_00_01typename_01void___3_01typename_01_t_1_1iterator__category_01_4_1_1type_01_4" ],
      [ "locale_ref", "classinternal_1_1locale__ref.html", "classinternal_1_1locale__ref" ],
      [ "make_integer_sequence", "structinternal_1_1make__integer__sequence.html", null ],
      [ "make_integer_sequence< T, 0, Ns... >", "structinternal_1_1make__integer__sequence_3_01_t_00_010_00_01_ns_8_8_8_01_4.html", null ],
      [ "make_unsigned_or_bool", "structinternal_1_1make__unsigned__or__bool.html", null ],
      [ "make_unsigned_or_bool< bool >", "structinternal_1_1make__unsigned__or__bool_3_01bool_01_4.html", "structinternal_1_1make__unsigned__or__bool_3_01bool_01_4" ],
      [ "named_arg", "structinternal_1_1named__arg.html", "structinternal_1_1named__arg" ],
      [ "named_arg_base", "structinternal_1_1named__arg__base.html", "structinternal_1_1named__arg__base" ],
      [ "needs_conversion", "structinternal_1_1needs__conversion.html", null ],
      [ "no_formatter_error", "structinternal_1_1no__formatter__error.html", null ],
      [ "no_thousands_sep", "structinternal_1_1no__thousands__sep.html", "structinternal_1_1no__thousands__sep" ],
      [ "null", "structinternal_1_1null.html", null ],
      [ "null_terminating_iterator", "classinternal_1_1null__terminating__iterator.html", "classinternal_1_1null__terminating__iterator" ],
      [ "precision_adapter", "structinternal_1_1precision__adapter.html", "structinternal_1_1precision__adapter" ],
      [ "precision_checker", "classinternal_1_1precision__checker.html", "classinternal_1_1precision__checker" ],
      [ "prettify_handler", "structinternal_1_1prettify__handler.html", "structinternal_1_1prettify__handler" ],
      [ "printf_precision_handler", "classinternal_1_1printf__precision__handler.html", "classinternal_1_1printf__precision__handler" ],
      [ "printf_width_handler", "classinternal_1_1printf__width__handler.html", "classinternal_1_1printf__width__handler" ],
      [ "result_of", "structinternal_1_1result__of.html", null ],
      [ "result_of< F(Args...)>", "structinternal_1_1result__of_3_01_f_07_args_8_8_8_08_4.html", "structinternal_1_1result__of_3_01_f_07_args_8_8_8_08_4" ],
      [ "specs_checker", "classinternal_1_1specs__checker.html", "classinternal_1_1specs__checker" ],
      [ "specs_handler", "classinternal_1_1specs__handler.html", "classinternal_1_1specs__handler" ],
      [ "specs_setter", "classinternal_1_1specs__setter.html", "classinternal_1_1specs__setter" ],
      [ "string_value", "structinternal_1_1string__value.html", "structinternal_1_1string__value" ],
      [ "test_stream", "structinternal_1_1test__stream.html", "structinternal_1_1test__stream" ],
      [ "truncating_iterator", "classinternal_1_1truncating__iterator.html", null ],
      [ "truncating_iterator< OutputIt, std::false_type >", "classinternal_1_1truncating__iterator_3_01_output_it_00_01std_1_1false__type_01_4.html", "classinternal_1_1truncating__iterator_3_01_output_it_00_01std_1_1false__type_01_4" ],
      [ "truncating_iterator< OutputIt, std::true_type >", "classinternal_1_1truncating__iterator_3_01_output_it_00_01std_1_1true__type_01_4.html", "classinternal_1_1truncating__iterator_3_01_output_it_00_01std_1_1true__type_01_4" ],
      [ "truncating_iterator_base", "classinternal_1_1truncating__iterator__base.html", "classinternal_1_1truncating__iterator__base" ],
      [ "value", "classinternal_1_1value.html", "classinternal_1_1value" ],
      [ "void_", "structinternal_1_1void__.html", "structinternal_1_1void__" ],
      [ "width_adapter", "structinternal_1_1width__adapter.html", "structinternal_1_1width__adapter" ],
      [ "width_checker", "classinternal_1_1width__checker.html", "classinternal_1_1width__checker" ]
    ] ],
    [ "std", null, [
      [ "numeric_limits< fmt::internal::dummy_int >", "classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1dummy__int_01_4.html", "classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1dummy__int_01_4" ]
    ] ],
    [ "align_spec", "structalign__spec.html", "structalign__spec" ],
    [ "arg_formatter", "classarg__formatter.html", "classarg__formatter" ],
    [ "arg_join", "structarg__join.html", "structarg__join" ],
    [ "back_insert_range", "classback__insert__range.html", "classback__insert__range" ],
    [ "basic_cstring_view", "classbasic__cstring__view.html", "classbasic__cstring__view" ],
    [ "basic_format_arg", "classbasic__format__arg.html", "classbasic__format__arg" ],
    [ "basic_format_args", "classbasic__format__args.html", "classbasic__format__args" ],
    [ "basic_format_context", "classbasic__format__context.html", "classbasic__format__context" ],
    [ "basic_format_specs", "structbasic__format__specs.html", "structbasic__format__specs" ],
    [ "basic_memory_buffer", "classbasic__memory__buffer.html", "classbasic__memory__buffer" ],
    [ "basic_parse_context", "classbasic__parse__context.html", "classbasic__parse__context" ],
    [ "basic_printf_context", "classbasic__printf__context.html", "classbasic__printf__context" ],
    [ "basic_printf_context_t", "structbasic__printf__context__t.html", "structbasic__printf__context__t" ],
    [ "basic_string_view", "classbasic__string__view.html", "classbasic__string__view" ],
    [ "basic_writer", "classbasic__writer.html", "classbasic__writer" ],
    [ "buffer_context", "structbuffer__context.html", "structbuffer__context" ],
    [ "buffered_file", "classbuffered__file.html", "classbuffered__file" ],
    [ "char_t", "structchar__t.html", null ],
    [ "compile_string", "structcompile__string.html", null ],
    [ "convert_to_int", "structconvert__to__int.html", null ],
    [ "convert_to_int< T, Char, void >", "structconvert__to__int_3_01_t_00_01_char_00_01void_01_4.html", "structconvert__to__int_3_01_t_00_01_char_00_01void_01_4" ],
    [ "core_format_specs", "structcore__format__specs.html", "structcore__format__specs" ],
    [ "dynamic_formatter", "classdynamic__formatter.html", "classdynamic__formatter" ],
    [ "error_code", "classerror__code.html", "classerror__code" ],
    [ "file", "classfile.html", "classfile" ],
    [ "float_spec_handler", "structfloat__spec__handler.html", "structfloat__spec__handler" ],
    [ "format_arg_store", "classformat__arg__store.html", "classformat__arg__store" ],
    [ "format_args", "structformat__args.html", "structformat__args" ],
    [ "format_args_t", "structformat__args__t.html", "structformat__args__t" ],
    [ "format_context_t", "structformat__context__t.html", "structformat__context__t" ],
    [ "format_error", "classformat__error.html", "classformat__error" ],
    [ "format_handler", "structformat__handler.html", "structformat__handler" ],
    [ "format_int", "classformat__int.html", "classformat__int" ],
    [ "format_to_n_args", "structformat__to__n__args.html", "structformat__to__n__args" ],
    [ "format_to_n_context", "structformat__to__n__context.html", null ],
    [ "format_to_n_result", "structformat__to__n__result.html", "structformat__to__n__result" ],
    [ "formatter", "structformatter.html", "structformatter" ],
    [ "formatter< arg_join< It, Char >, Char >", "structformatter_3_01arg__join_3_01_it_00_01_char_01_4_00_01_char_01_4.html", "structformatter_3_01arg__join_3_01_it_00_01_char_01_4_00_01_char_01_4" ],
    [ "formatter< RangeT, Char, typename std::enable_if< fmt::is_range< RangeT >::value >::type >", "structformatter_3_01_range_t_00_01_char_00_01typename_01std_1_1enable__if_3_01fmt_1_1is__range_338ef07b6d6c7537efaa2c888f2ea4c8d.html", "structformatter_3_01_range_t_00_01_char_00_01typename_01std_1_1enable__if_3_01fmt_1_1is__range_338ef07b6d6c7537efaa2c888f2ea4c8d" ],
    [ "formatter< std::chrono::duration< Rep, Period >, Char >", "structformatter_3_01std_1_1chrono_1_1duration_3_01_rep_00_01_period_01_4_00_01_char_01_4.html", "structformatter_3_01std_1_1chrono_1_1duration_3_01_rep_00_01_period_01_4_00_01_char_01_4" ],
    [ "formatter< std::tm, Char >", "structformatter_3_01std_1_1tm_00_01_char_01_4.html", "structformatter_3_01std_1_1tm_00_01_char_01_4" ],
    [ "formatter< T, Char, typename std::enable_if< internal::format_type< typename buffer_context< Char >::type, T >::value >::type >", "structformatter_3_01_t_00_01_char_00_01typename_01std_1_1enable__if_3_01internal_1_1format__typeef2b7d59b5441fbead72290e06693dea.html", "structformatter_3_01_t_00_01_char_00_01typename_01std_1_1enable__if_3_01internal_1_1format__typeef2b7d59b5441fbead72290e06693dea" ],
    [ "formatter< T, Char, typename std::enable_if< internal::is_streamable< T, Char >::value &&!internal::format_type< typename buffer_context< Char >::type, T >::value >::type >", "structformatter_3_01_t_00_01_char_00_01typename_01std_1_1enable__if_3_01internal_1_1is__streamabdfe791f5d6e0a8acd43f884d0761b8af.html", "structformatter_3_01_t_00_01_char_00_01typename_01std_1_1enable__if_3_01internal_1_1is__streamabdfe791f5d6e0a8acd43f884d0761b8af" ],
    [ "formatter< TupleT, Char, typename std::enable_if< fmt::is_tuple_like< TupleT >::value >::type >", "structformatter_3_01_tuple_t_00_01_char_00_01typename_01std_1_1enable__if_3_01fmt_1_1is__tuple__a8a88f793f5f612c28a21643fc88182d.html", "structformatter_3_01_tuple_t_00_01_char_00_01typename_01std_1_1enable__if_3_01fmt_1_1is__tuple__a8a88f793f5f612c28a21643fc88182d" ],
    [ "formatting_base", "structformatting__base.html", "structformatting__base" ],
    [ "formatting_range", "structformatting__range.html", "structformatting__range" ],
    [ "formatting_tuple", "structformatting__tuple.html", "structformatting__tuple" ],
    [ "is_compile_string", "structis__compile__string.html", null ],
    [ "is_constructible", "structis__constructible.html", null ],
    [ "is_contiguous", "structis__contiguous.html", null ],
    [ "is_contiguous< internal::basic_buffer< Char > >", "structis__contiguous_3_01internal_1_1basic__buffer_3_01_char_01_4_01_4.html", null ],
    [ "is_contiguous< std::basic_string< Char > >", "structis__contiguous_3_01std_1_1basic__string_3_01_char_01_4_01_4.html", null ],
    [ "is_range", "structis__range.html", "structis__range" ],
    [ "is_tuple_like", "structis__tuple__like.html", "structis__tuple__like" ],
    [ "monostate", "structmonostate.html", null ],
    [ "output_range", "classoutput__range.html", "classoutput__range" ],
    [ "printf_arg_formatter", "classprintf__arg__formatter.html", "classprintf__arg__formatter" ],
    [ "printf_formatter", "structprintf__formatter.html", "structprintf__formatter" ],
    [ "rgb", "structrgb.html", "structrgb" ],
    [ "system_error", "classsystem__error.html", "classsystem__error" ],
    [ "text_style", "classtext__style.html", "classtext__style" ],
    [ "u8string_view", "classu8string__view.html", "classu8string__view" ],
    [ "wformat_args", "structwformat__args.html", "structwformat__args" ]
];